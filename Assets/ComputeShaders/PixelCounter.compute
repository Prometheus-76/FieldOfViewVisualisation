#pragma kernel Initialise
#pragma kernel AtomicComparisonAdd
 
// Input
Texture2D<float4> ImageTexture;
Texture2D<float4> MaskTexture;
float4 InverseMaskDimensions;
float MaskClipThreshold;

// Internal
SamplerState samplerMaskTexture;
 
// Output
RWStructuredBuffer<int> ResultBuffer;
 
[numthreads(1, 1, 1)]
void Initialise(uint3 id : SV_DispatchThreadID)
{
    // Reset output
    ResultBuffer[0] = 0;
    ResultBuffer[1] = 0;
}

[numthreads(8, 8, 1)]
void AtomicComparisonAdd(uint3 id : SV_DispatchThreadID)
{
    // id.xy are the pixel coordinates in the mask texture for this call
    float2 uv = id.xy * InverseMaskDimensions.xy;
    
    // We could look up 1:1 into this texture if we wanted to using the pixel coordinates (ie. whole pixels, not uvs), it would be faster but less accurate
    float4 maskColour = MaskTexture[id.xy];
    //float4 maskColour = MaskTexture.SampleLevel(samplerMaskTexture, uv, 0);
    
    float4 imageColour = ImageTexture.SampleLevel(samplerMaskTexture, uv, 0);
    
    // The image exists in this pixel, now we check if the mask exists too
    if (imageColour.r > 0.0f)
    {
        // How many pixels exist in the base image?
        InterlockedAdd(ResultBuffer[0], 1);
        
        if (maskColour.r > MaskClipThreshold)
        {
            // How many pixels exist in overlap between the base image and the mask?
            InterlockedAdd(ResultBuffer[1], 1);
        }
    }
}